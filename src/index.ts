import { app, BrowserWindow, globalShortcut } from 'electron';
import Screenshots from './screenshot/lib';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SCREENSHOT_WINDOW_WEBPACK_ENTRY: string;
declare const SCREENSHOT_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.whenReady().then(() => {
  console.log('app ready !!!!');

  const screenshots = new Screenshots();
  globalShortcut.register('CommandOrControl+T', () => {
    console.log('开始截屏!!!!');
    screenshots.startCapture();
    screenshots.$view.webContents.openDevTools();

    // // Create the browser window.
    // const screenshotWindow = new BrowserWindow({
    //   height: 600,
    //   width: 800,
    //   webPreferences: {
    //     preload: SCREENSHOT_WINDOW_PRELOAD_WEBPACK_ENTRY
    //   }
    // });

    // // and load the index.html of the app.
    // screenshotWindow.loadURL(SCREENSHOT_WINDOW_WEBPACK_ENTRY);

    // // Open the DevTools.
    // screenshotWindow.webContents.openDevTools();
  });
  globalShortcut.register('esc', () => {
    if (screenshots.$win?.isFocused()) {
      screenshots.endCapture();
    }
  });
  // 点击确定按钮回调事件
  screenshots.on('ok', (e, buffer, bounds) => {
    console.log('capture', buffer, bounds);
  });
  // 点击取消按钮回调事件
  screenshots.on('cancel', () => {
    console.log('capture', 'cancel1');
  });
  screenshots.on('cancel', (e) => {
    // 执行了preventDefault
    // 点击取消不会关闭截图窗口
    e.preventDefault();
    console.log('capture', 'cancel2');
  });
  // 点击保存按钮回调事件
  screenshots.on('save', (e, buffer, bounds) => {
    console.log('capture', buffer, bounds);
  });
  // 保存后的回调事件
  screenshots.on('afterSave', (e, buffer, bounds, isSaved) => {
    console.log('capture', buffer, bounds);
    console.log('isSaved', isSaved); // 是否保存成功
  });
});
